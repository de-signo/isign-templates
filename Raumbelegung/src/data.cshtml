@using Newtonsoft.Json
@using Stolltec.Forms.Model
@using System.Globalization
@functions{
  DateTime ReadDate(RowModel booking, char mode, string name, DateTimeStyles flags)
  {
    if (mode == 'B')
    {
      var time = booking[name];
      var date = booking["date" + name];
      return
        (date is DateTime ? (DateTime)date : DateTime.Parse(date.ToString(), null, flags)) +
        (time is TimeSpan ? (TimeSpan)time : TimeSpan.Parse(time.ToString()));
    }
    else
    {
      var dt = booking[name];
      return dt is DateTime ? (DateTime)dt : DateTime.Parse(dt.ToString(), null, flags);
    }
  }
}
@{
  Response.ContentType = "application/json";
  var mode = Request.Params["s"].Last();
  var model = new FormsModel(this);
  var ds = model.DataSource("s");
  var booking = ds.FirstOrDefault();
}
@if (booking == null) {
  <text>null</text>
}
else {
  DateTimeStyles parseFlags;
  switch((string)model.Style["tz"].FieldInstance.Value)
  {
    case "srv":
      // Alredy in local time zone.
      parseFlags = DateTimeStyles.AssumeLocal;
      break;
    default:
    case "utc":
      parseFlags = DateTimeStyles.AssumeUniversal;
      break;
  }
  var from = ReadDate(booking, mode, "from", parseFlags);
  var to = ReadDate(booking, mode, "to", parseFlags);
  var bp = booking["participants"] as string;
  var participants = String.IsNullOrEmpty(bp) ? new string[0] : bp.Split(';');
  @Html.Raw(JsonConvert.SerializeObject(new {
    title = booking["title"],
    subtitle = booking["subtitle"],
    from = from.ToString("o", CultureInfo.InvariantCulture),
    to = to.ToString("o", CultureInfo.InvariantCulture),
    participants = participants
  }));
}